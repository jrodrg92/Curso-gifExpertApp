{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","components/GifGrid.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","imputValue","setImputValue","handleSubmit","e","preventDefault","length","categories","console","log","onSubmit","type","onChange","target","value","onClick","GifGridItem","img","url","alt","title","GifGrid","categorie","images","setimages","useEffect","getGifs","a","fetch","resp","json","data","map","id","downsized_medium","GifExpertApp","props","ReactDOM","render","document","getElementById"],"mappings":"iNAsCeA,EAlCK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAElB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAMMC,EAAe,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAS,GACnBP,GAAe,SAAAQ,GAAU,4BAAQA,GAAR,CAAoBN,OAGjDC,EAAc,IACdM,QAAQC,IAAI,sBAGhB,OAEI,uBAAMC,SAAYP,EAAlB,UACI,8CACA,uBAAOQ,KAAK,OAAOC,SAnBD,SAACR,GACnBF,EAAcE,EAAES,OAAOC,QAkB0BA,MAAQb,IACzD,wBAAQc,QAAWZ,EAAnB,yB,uBChBGa,EATK,SAAC,GAAW,IAAVC,EAAS,EAATA,IAClB,OACI,qCACI,qBAAKC,IAAOD,EAAIC,IAAKC,IAAMF,EAAIG,QAC/B,4BAAIH,EAAIG,YC2DLC,EA9DC,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,UAId,EAA4BtB,mBAAS,IAArC,mBAAOuB,EAAP,KAAeC,EAAf,KAEAC,qBAAU,WACNC,OAGJ,IAAMA,EAAO,uCAAG,kCAAAC,EAAA,4DAEA,+BACG,mCAHH,SAKOC,MAAM,WAAD,OAHZ,+BAGY,oBAFT,mCAES,cAAuCN,EAAvC,cALZ,cAKNO,EALM,gBAOSA,EAAKC,OAPd,gBAOLC,EAPK,EAOLA,KAEDd,EAAMc,EAAKC,KAAK,SAAAf,GAAQ,IAAD,EACzB,MAAO,CACHgB,GAAIhB,EAAIgB,GACRb,MAAOH,EAAIG,MACXF,IAAG,UAAED,EAAIM,cAAN,aAAE,EAAYW,iBAAiBhB,QAI1CM,EAAUP,GAjBE,4CAAH,qDA2Bb,OACI,qCACI,6BAAKK,IAGL,6BAEOC,EAAOS,KAAK,YAAY,IAAVf,EAAS,EAATA,IACX,OACE,6BACG,cAAC,EAAD,CAAaA,IAAMA,KADbA,EAAIgB,aClBtBE,EA3BM,SAACC,GAIlB,MAAoCpC,mBAAS,CAAC,gBAAiB,oBAAqB,qBAAsB,gBAA1G,mBAAOO,EAAP,KAAmBR,EAAnB,KAEA,OACI,qCAEI,8CACA,uBAEA,cAAC,EAAD,CAAaA,cAAgBA,IAE7B,6BAEOQ,EAAWyB,KAAK,SAAAV,GAAS,OAAI,6BAAoB,cAAC,EAAD,CAASA,UAAWA,KAA/BA,YChBzDe,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.d42e3d35.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\n\n//rafcp\nconst AddCategory = ({setCategories}) => {\n\n    const [imputValue, setImputValue] = useState('');\n\n    const handleImputChange = (e) => {\n            setImputValue(e.target.value)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        \n        if(imputValue.length > 0){\n            setCategories( categories => [...categories, imputValue] );\n        }\n\n        setImputValue(\"\");\n        console.log('Submit realizado!')\n    }\n\n    return (\n \n        <form onSubmit = {handleSubmit}>\n            <h2>Add Category</h2>\n            <input type='text' onChange= {handleImputChange} value={ imputValue } />\n            <button onClick= { handleSubmit }>Agregar</button>\n        </form>\n\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\nexport default AddCategory;\n\n\n\n","//rafcp\nimport React from 'react'\n\nconst GifGridItem = ({img}) => {\n    return (\n        <>\n            <img url = {img.url} alt= {img.title} />\n            <p>{img.title}</p>\n        </>\n    )\n}\n\nexport default GifGridItem\n","//rafcp\nimport React, {useState, useEffect} from 'react'\nimport GifGridItem from './GifGridItem';\n\nconst GifGrid = ({categorie}) => {\n\n    //const [counter, setCount] = useState(0);\n\n    const [images, setimages] = useState([]);\n    \n    useEffect(() => {\n        getGifs();\n    });\n\n    const getGifs = async() => {\n\n        const url = 'api.giphy.com/v1/gifs/search';\n        const apikey = '5zhBBQiOnZ4UPrJ24rYitOpHtoGYP4T2';\n\n        const resp = await fetch(`https://${url}?api_key=${apikey}&q=${categorie}&limit=10`);\n\n        const {data} = await resp.json();\n\n        const img = data.map( img => {\n            return {\n                id: img.id,\n                title: img.title,\n                url: img.images?.downsized_medium.url\n            }\n        })\n\n        setimages(img);\n    }\n\n    /*const handleCounter = () => {\n        setCount( counter +1 )\n    }*/\n\n    //llamada a funciones asincronas fuera del render\n    //getGifs();\n\n    return (\n        <> \n            <h3>{categorie}</h3> \n            {/*<h3>{counter}</h3>*/}\n            {/*<button onClick={handleCounter}></button>*/}\n            <ol>\n                {\n                   images.map( ({img}) => {\n                      return (\n                        <li key={img.id}>\n                           <GifGridItem img={ img } />\n                        </li>\n                       )\n                    }\n                  )\n                }\n            </ol>\n        </>\n    )\n}\n\nGifGrid.propTypes = {\n\n}\n\nexport default GifGrid\n","import React, {useState} from 'react';\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid'\n\n//rafcp\nconst GifExpertApp = (props) => {\n    \n    //const categories = ['Dragon Ball Z', 'Dragon Ball Super', 'Singueki no kioyin', 'Saint seiya'];\n    \n    const [categories, setCategories] = useState(['Dragon Ball Z', 'Dragon Ball Super', 'Singueki no kioyin', 'Saint seiya']);\n\n    return (\n        <>  \n            {/**GifExpertApp */}\n            <h2>GifExpertApp</h2>\n            <hr/>\n\n            <AddCategory setCategories={ setCategories }/>\n\n            <ol>\n                {\n                   categories.map( categorie => <li key={categorie}><GifGrid categorie={categorie}/></li>)\n                }\n            </ol>\n        </>\n    )\n}\n\nGifExpertApp.propTypes = {\n\n}\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}